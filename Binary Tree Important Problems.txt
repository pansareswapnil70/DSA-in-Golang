Here are some of the most common and popular **LeetCode Medium** problems related to **Binary Trees**. These problems cover a variety of concepts and techniques, including traversal, recursion, and dynamic programming, which are key to mastering tree data structures. 

### 1. **Binary Tree Level Order Traversal**
   - **Problem**: [Binary Tree Level Order Traversal](https://leetcode.com/problems/binary-tree-level-order-traversal/)
   - **Description**: Given a binary tree, return the level order traversal of its nodes' values (i.e., from left to right, level by level).
   - **Concepts**: Breadth-First Search (BFS), Queue.

### 2. **Binary Tree Right Side View**
   - **Problem**: [Binary Tree Right Side View](https://leetcode.com/problems/binary-tree-right-side-view/)
   - **Description**: Return the values of the nodes that can be seen when the tree is viewed from the right side.
   - **Concepts**: Level Order Traversal, BFS, or DFS with right-first traversal.

### 3. **Construct Binary Tree from Preorder and Inorder Traversal**
   - **Problem**: [Construct Binary Tree from Preorder and Inorder Traversal](https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/)
   - **Description**: Given preorder and inorder traversal of a tree, construct the binary tree.
   - **Concepts**: Recursive tree building using traversal properties, HashMaps for index retrieval.

### 4. **Validate Binary Search Tree**
   - **Problem**: [Validate Binary Search Tree](https://leetcode.com/problems/validate-binary-search-tree/)
   - **Description**: Determine if a binary tree is a valid binary search tree (BST).
   - **Concepts**: Depth-First Search (DFS), recursion with min/max constraints.

### 5. **Flatten Binary Tree to Linked List**
   - **Problem**: [Flatten Binary Tree to Linked List](https://leetcode.com/problems/flatten-binary-tree-to-linked-list/)
   - **Description**: Flatten the tree into a "linked list" in-place following the preorder traversal order.
   - **Concepts**: DFS, Recursive or Iterative In-Place Transformation.

### 6. **Lowest Common Ancestor of a Binary Tree**
   - **Problem**: [Lowest Common Ancestor of a Binary Tree](https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/)
   - **Description**: Given a binary tree, find the lowest common ancestor (LCA) of two nodes.
   - **Concepts**: Recursion, Backtracking, Tree Traversal.

### 7. **Binary Tree Zigzag Level Order Traversal**
   - **Problem**: [Binary Tree Zigzag Level Order Traversal](https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/)
   - **Description**: Perform a zigzag level order traversal, where levels alternate between left-to-right and right-to-left.
   - **Concepts**: BFS, Queue, or Stack with a level-based flip.

### 8. **Path Sum II**
   - **Problem**: [Path Sum II](https://leetcode.com/problems/path-sum-ii/)
   - **Description**: Find all root-to-leaf paths in the binary tree that sum up to a target value.
   - **Concepts**: DFS, Backtracking.

### 9. **Populating Next Right Pointers in Each Node**
   - **Problem**: [Populating Next Right Pointers in Each Node](https://leetcode.com/problems/populating-next-right-pointers-in-each-node/)
   - **Description**: Populate each node's next pointer to its right node in a perfect binary tree.
   - **Concepts**: Level Order Traversal, Recursive or Iterative Linking.

### 10. **Kth Smallest Element in a BST**
   - **Problem**: [Kth Smallest Element in a BST](https://leetcode.com/problems/kth-smallest-element-in-a-bst/)
   - **Description**: Find the kth smallest element in a BST.
   - **Concepts**: Inorder Traversal, DFS, Stack for iterative inorder traversal.

### 11. **Serialize and Deserialize Binary Tree**
   - **Problem**: [Serialize and Deserialize Binary Tree](https://leetcode.com/problems/serialize-and-deserialize-binary-tree/)
   - **Description**: Design an algorithm to serialize and deserialize a binary tree.
   - **Concepts**: BFS for serialization and deserialization, Queue for level-order approach.

### 12. **Binary Tree Maximum Path Sum**
   - **Problem**: [Binary Tree Maximum Path Sum](https://leetcode.com/problems/binary-tree-maximum-path-sum/)
   - **Description**: Find the maximum path sum for any path in a binary tree.
   - **Concepts**: DFS, Recursion with Tracking Maximum Path Values.

### 13. **Construct Binary Tree from Inorder and Postorder Traversal**
   - **Problem**: [Construct Binary Tree from Inorder and Postorder Traversal](https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/)
   - **Description**: Construct a binary tree from given inorder and postorder traversal lists.
   - **Concepts**: Recursive Construction with Postorder for Root Identification.

### 14. **Sum Root to Leaf Numbers**
   - **Problem**: [Sum Root to Leaf Numbers](https://leetcode.com/problems/sum-root-to-leaf-numbers/)
   - **Description**: Return the total sum of all root-to-leaf numbers, where each root-to-leaf path forms a number.
   - **Concepts**: DFS, Backtracking, Recursive Calculation of Sum.

### 15. **Convert BST to Greater Tree**
   - **Problem**: [Convert BST to Greater Tree](https://leetcode.com/problems/convert-bst-to-greater-tree/)
   - **Description**: Convert a BST to a greater tree where each node contains the sum of all nodes greater than or equal to itself.
   - **Concepts**: Reverse Inorder Traversal (right-to-left), Accumulative Sum.

### Summary of Techniques:

- **Traversal Methods**: BFS, DFS, Preorder, Inorder, Postorder.
- **Recursive Tree Construction**: Leveraging traversal properties to reconstruct trees.
- **Backtracking and Path Finding**: For problems involving specific path constraints (like path sums).
- **In-Place Transformations**: Flattening and pointer modifications for linked list-like structures.
- **Tree Properties and Constraints**: Validating structures (BST properties), linking nodes, and LCA determination.

These problems cover a well-rounded set of skills in binary trees, from basic traversals to more advanced recursive tree manipulations. Practicing these will strengthen both your binary tree understanding and general problem-solving approach for medium-level problems on LeetCode.